version: "3.7"

volumes:
  kong_data_pg: {}

networks:
  kong-net:
    driver: bridge
    ipam: 
      config: 
        - subnet: 172.1.1.0/24

services:
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_HOST_AUTH_METHOD: trust    
    volumes:
      - kong_data_pg:/var/lib/postgresql/data  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: 
      - kong-net

  kong-migration:
    # Container for the necessary migrations to Kong. 
    container_name: kong-migration
    image: kong:latest
    command: "kong migrations bootstrap"
    networks: 
      - kong-net
    restart: on-failure
    environment: 
      TZ: America/Sao_Paulo 
      KONG_DATABASE: postgres      
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
    links:
      - kong-database
    depends_on: 
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    container_name: kong    
    networks: 
      kong-net:
        ipv4_address: 172.1.1.40
    environment:
      TZ: America/Sao_Paulo
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
#      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_REAL_IP_RECURSIVE: "on"
    restart: on-failure
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "7946:7946"
      - "7946:7946/udp"
    links:
      - kong-database
    depends_on: 
      - kong-migration
      - kong-database      

  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database      
    depends_on:
      - kong-database      

  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database      
    ports:
      - "1337:1337"    
      
  elasticsearch:
    # Elasticsearch container. It was used to store the monitoring information 
    # generated from Kong and transmitted by the logstash.
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment: 
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_PASSWORD: changeme
    networks: 
      - kong-net

  logstash:
    # Logstash container. This tool was used to transmit the monitoring 
    # information generated by Kong via the UDP port to be stored in elasticsearch 
    # and thus be consumed by Kibana.
    image: docker.elastic.co/logstash/logstash:7.2.1
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    links:
      - elasticsearch
    environment: 
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"      
    networks: 
      - kong-net

  kibana:
    # Container of the kibana. This tool was used to generate visual information 
    # through dashboards from the data provided by Kong.
    # It can be accessed through HTTP on port 5601.
    image: docker.elastic.co/kibana/kibana:7.2.1
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      SERVER_HOST: 0.0.0.0
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks: 
      - kong-net